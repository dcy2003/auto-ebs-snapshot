AWSTemplateFormatVersion: "2010-09-09"
Description: Provisions an EC2 instance in an Auto Scaling Group bootstrapped to snapshot EBS volumes once a day and retain snapshots for 14 days
Parameters:
  InstanceType:
    Description: Desired instance type for EC2 instance used for EBS management cron jobs
    Type: String
    Default: t2.micro
  CentOS7AmiId:
    Description: ID of preferred AMI (UserData assumes CentOS 7)
    Type: String
  SshKey:
    Description: The name of the key pair to be used to SSH into EC2 instance
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: Must be the name of an existing EC2 KeyPair
  SecurityGroupId:
    Description: The ID of an existing security group in the current region
    Type: AWS::EC2::SecurityGroup::Id
    ConstraintDescription: Must be the ID of an existing VPC in the format sg-xxxxxxxx
Resources:
  EbsBkupRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
  EbsBkupPolicy: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "EbsBkupPolicy"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action: 
              - "ec2:DescribeVolumes"
              - "ec2:DescribeSnapshots"
              - "ec2:CreateSnapshot"
              - "ec2:DeleteSnapshot"
            # Note: ^ these actions ^  do NOT yet support resource-level permissions 
            # See http://docs.aws.amazon.com/AWSEC2/latest/APIReference/ec2-api-permissions.html#ec2-api-unsupported-resource-permissions
            # For now we must use a resource value of "*" due to the AWS limitation noted above
            # if/when AWS supports resource-level permissions for these actions,
            # we can then construct ARN-level resource blocks like the CreateTags example below
            Resource: "*" 
          - Effect: "Allow"
            Action:
              - "ec2:CreateTags"
            # The ec2:CreateTags action DOES support resource-level permissions
            # See http://docs.aws.amazon.com/AWSEC2/latest/APIReference/ec2-api-permissions.html#ec2-api-supported-resource-permissions
            # This example shows how an ARN pattern can be dynamically constructed for the resource block
            Resource:
              Fn::Join:
                - ":"
                - - "arn"
                  - "aws"
                  - "ec2"
                  - Ref: "AWS::Region"
                  - ":snapshot/*"
      Roles: 
        - Ref: "EbsBkupRole"
  EbsBkupInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - Ref: "EbsBkupRole"
  LaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      IamInstanceProfile: !GetAtt EbsBkupInstanceProfile.Arn
      ImageId: !Ref CentOS7AmiId
      InstanceMonitoring: "false"
      InstanceType: !Ref InstanceType
      KeyName: !Ref SshKey
      SecurityGroups: 
        - Ref: SecurityGroupId
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub | # Fn::Join not needed in YAML
          #!/bin/bash
          yum install epel-release -y
          yum install jq python-pip -y
          pip install --upgrade --user awscli
          ln -s /root/.local/bin/aws /usr/bin/aws
          aws configure set output json
          aws configure set region ${AWS::Region}
          cat << 'EOF' > /root/ebs.sh
          #!/bin/bash
          # accepts parameters to backup or delete volumes
          # if delete, accepts age parameter to determine what to delete
          ACTION=$1
          AGE=$2
          if [ -z $ACTION ];
          then
            echo "Usage $1: Define ACTION of backup or delete"
            exit 1
          fi
          if [ "$ACTION" = "delete" ] && [ -z $AGE ];
          then
            echo "Please enter the age of backups you would like to delete"
            exit 1
          fi
          function backup_ebs () {
            for volume in $(aws ec2 describe-volumes | jq .Volumes[].VolumeId | sed 's/\"//g')
            do
              echo Creating snapshot for $volume
              SNAPSHOT_ID=$(aws ec2 create-snapshot --volume-id $volume --description "automated-ebs-backup-script" | jq .SnapshotId | sed 's/\"//g')
              aws ec2 create-tags --resources $SNAPSHOT_ID --tags 'Key="Name",Value="Automated EBS Snapshot"'
            done
          }
          function delete_snapshots () {
            for snapshot in $(aws ec2 describe-snapshots --filters Name=description,Values=automated-ebs-backup-script | jq .Snapshots[].SnapshotId | sed 's/\"//g')
            do
              SNAPSHOTDATE=$(aws ec2 describe-snapshots --filters Name=snapshot-id,Values=$snapshot | jq .Snapshots[].StartTime | cut -d T -f1 | sed 's/\"//g')
              STARTDATE=$(date +%s)
              ENDDATE=$(date -d $SNAPSHOTDATE +%s)
              INTERVAL=$[ (STARTDATE - ENDDATE) / (60*60*24) ]
              if (( $INTERVAL >= $AGE ));
              then
                echo "Deleting snapshot $snapshot"
                aws ec2 delete-snapshot --snapshot-id $snapshot
              fi
            done
          }
          case $ACTION in
            "backup")
              backup_ebs
            ;;
            "delete")
              delete_snapshots
            ;;
          esac
          EOF
          chmod 744 /root/ebs.sh
          echo "0 0 * * * root /root/ebs.sh backup" >> /etc/crontab
          echo "0 0 * * * root /root/ebs.sh delete 14" >> /etc/crontab
  AutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AvailabilityZones:
        Fn::GetAZs:
          Ref: "AWS::Region"
      LaunchConfigurationName: !Ref LaunchConfiguration
      DesiredCapacity: "1"
      MaxSize: "1"
      MinSize: "1"
      Tags:
        - Key: Name
          Value: EBS Backup HA Instance
          PropagateAtLaunch: true
        - Key: Purpose
          Value: Ensures high availability
          PropagateAtLaunch: false
Outputs:
  LaunchConfigurationId:
    Description: The ID of the Launch Configuration
    Value:
      Ref: "LaunchConfiguration"
  AutoScalingGroupId:
    Description: The ID of the Auto Scaling Group
    Value:
      Ref: "AutoScalingGroup"
  EbsBkupRoleId:
    Description: The ID of the Role
    Value:
      Ref: "EbsBkupRole"
  EbsBkupPolicyId:
    Description: The ID of the Policy
    Value:
      Ref: "EbsBkupPolicy"
  EbsBkupInstanceProfileId:
    Description: The ID of the Instance Profile
    Value:
      Ref: "EbsBkupInstanceProfile"